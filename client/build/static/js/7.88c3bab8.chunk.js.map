{"version":3,"sources":["helpers/regex.js","containers/Signup/styles.js","containers/Signup/index.js"],"names":["EMAIL_REGEX","Form","styled","form","ButtonBar","div","Error","span","variables","danger","Signup","history","useHistory","isLoading","useSelector","state","auth","dispatch","useDispatch","useForm","register","handleSubmit","errors","getValues","nameRef","required","value","message","minLength","maxLength","emailRef","pattern","passwordRef","passwordConfirmationRef","validate","data","event","a","preventDefault","password_confirmation","signupHandler","Spinner","src","logo","alt","onSubmit","FormGroup","Label","htmlFor","Input","id","placeholder","name","ref","email","type","password","Button","btnType","onClick","push","variant"],"mappings":"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","file":"static/js/7.88c3bab8.chunk.js","sourcesContent":["//eslint-disable-next-line\r\nexport const EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n","import styled from 'styled-components';\nimport * as variables from '../../helpers/style-constants';\n\nexport const Form = styled.form`\n  margin-top: 50px;\n`;\n\nexport const ButtonBar = styled.div`\n  text-align: center;\n  margin-top: 50px;\n`;\n\nexport const Error = styled.span`\n  font-size: 12px;\n  font-weight: 600;\n  color: ${variables.COLORS.danger};\n  align-self: start;\n  display: block;\n  margin-top: 8px;\n`;\n","import React from 'react';\r\nimport FormGroup from '../../components/UI/FormGroup';\r\nimport Button from '../../components/UI/Button';\r\nimport { useHistory } from 'react-router';\r\nimport { EMAIL_REGEX } from '../../helpers/regex';\r\nimport { signupHandler } from '../../store/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner';\r\nimport { Form, ButtonBar, Error } from './styles';\r\nimport { TitleBar, Title } from '../../containers/_layouts/Default/styles';\r\nimport logo from '../../assets/images/logo.svg';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nfunction Signup() {\r\n  const history = useHistory();\r\n\r\n  const { isLoading } = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  const { register, handleSubmit, errors, getValues } = useForm();\r\n\r\n  const nameRef = register({\r\n    required: {\r\n      value: true,\r\n      message: 'The name is required',\r\n    },\r\n    minLength: {\r\n      value: 3,\r\n      message: 'The name must have more than 3 chars',\r\n    },\r\n    maxLength: {\r\n      value: 100,\r\n      message: 'The name must have less than 100 chars',\r\n    },\r\n  });\r\n\r\n  const emailRef = register({\r\n    required: {\r\n      value: true,\r\n      message: 'The email is required',\r\n    },\r\n    minLength: {\r\n      value: 8,\r\n      message: 'The email must have more than 8 chars',\r\n    },\r\n    maxLength: {\r\n      value: 255,\r\n      message: 'The email must have less than 255 chars',\r\n    },\r\n    pattern: {\r\n      value: EMAIL_REGEX,\r\n      message: 'The email is not valid',\r\n    },\r\n  });\r\n\r\n  const passwordRef = register({\r\n    required: {\r\n      value: true,\r\n      message: 'The password is required',\r\n    },\r\n    minLength: {\r\n      value: 6,\r\n      message: 'The password must have more than 6 chars',\r\n    },\r\n    maxLength: {\r\n      value: 255,\r\n      message: 'The password must have less than 255 chars',\r\n    },\r\n  });\r\n\r\n  const passwordConfirmationRef = register({\r\n    required: {\r\n      value: true,\r\n      message: 'The password Confirmation is required',\r\n    },\r\n    validate: (value) =>\r\n      value === getValues('password') || \"The password don't match\",\r\n  });\r\n\r\n  async function handleSignupSubmit(data, event) {\r\n    event.preventDefault();\r\n\r\n    delete data.password_confirmation;\r\n    dispatch(signupHandler(data));\r\n  }\r\n\r\n  function handleLogin() {\r\n    history.push('/login');\r\n  }\r\n\r\n  let content = null;\r\n\r\n  if (isLoading) {\r\n    content = <Spinner />;\r\n  } else {\r\n    content = (\r\n      <>\r\n        <TitleBar>\r\n          <img src={logo} alt=\"Shoppingify\" />\r\n          <Title>Signup</Title>\r\n          <img src={logo} alt=\"Shoppingify\" />\r\n        </TitleBar>\r\n        <Form onSubmit={handleSubmit(handleSignupSubmit)}>\r\n          <FormGroup>\r\n            <FormGroup.Label htmlFor=\"name\">Name</FormGroup.Label>\r\n            <FormGroup.Input\r\n              id=\"name\"\r\n              placeholder=\"Enter your name\"\r\n              name=\"name\"\r\n              ref={nameRef}\r\n            />\r\n            {errors?.name && <Error>{errors?.name.message}</Error>}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <FormGroup.Label htmlFor=\"email\">Email</FormGroup.Label>\r\n            <FormGroup.Input\r\n              id=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              name=\"email\"\r\n              ref={emailRef}\r\n            />\r\n            {errors?.email && <Error>{errors?.email.message}</Error>}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <FormGroup.Label htmlFor=\"password\">Password</FormGroup.Label>\r\n            <FormGroup.Input\r\n              id=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              name=\"password\"\r\n              ref={passwordRef}\r\n            />\r\n            {errors?.password && <Error>{errors?.password.message}</Error>}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <FormGroup.Label htmlFor=\"passwordConfirmation\">\r\n              Confirm Password\r\n            </FormGroup.Label>\r\n            <FormGroup.Input\r\n              id=\"passwordConfirmation\"\r\n              type=\"password\"\r\n              placeholder=\"Repeat the password\"\r\n              name=\"password_confirmation\"\r\n              ref={passwordConfirmationRef}\r\n            />\r\n            {errors?.password_confirmation && (\r\n              <Error>{errors?.password_confirmation.message}</Error>\r\n            )}\r\n          </FormGroup>\r\n          <ButtonBar>\r\n            <Button type=\"button\" btnType=\"flat\" onClick={handleLogin}>\r\n              login\r\n            </Button>\r\n            <Button type=\"submit\" btnType=\"raised\" variant=\"secondary\">\r\n              Signup\r\n            </Button>\r\n          </ButtonBar>\r\n        </Form>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\nexport default Signup;\r\n"],"sourceRoot":""}