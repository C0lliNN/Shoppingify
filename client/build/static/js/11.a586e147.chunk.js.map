{"version":3,"sources":["containers/Statistics/styles.js","containers/Statistics/index.js"],"names":["Container","styled","section","TopContainer","div","variables","Title","h3","ItemGroup","Statistics","useState","isLoading","setIsLoading","data","setData","error","setError","a","api","get","response","errorMessage","message","useEffect","getData","content","Spinner","topItems","map","i","key","_id","className","name","Math","round","quantity","totalItems","style","width","topCategories","c","marginTop","height","itemsPerMonth","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","ErrorMessage"],"mappings":"0jDAGO,IAAMA,EAAYC,IAAOC,QAAV,KAITC,EAAeF,IAAOG,IAAV,IAMFC,KAWVC,EAAQL,IAAOM,GAAV,IAKKF,IACNA,KAIJG,EAAYP,IAAOG,IAAV,K,iBClBP,SAASK,IAAc,IAAD,EACDC,oBAAS,GADR,mBAC5BC,EAD4B,KACjBC,EADiB,OAEXF,qBAFW,mBAE5BG,EAF4B,KAEtBC,EAFsB,OAGTJ,qBAHS,mBAG5BK,EAH4B,KAGrBC,EAHqB,iDAKnC,8BAAAC,EAAA,+EAE2BC,IAAIC,IAAI,eAFnC,OAEUC,EAFV,OAGIN,EAAQM,EAASP,MAHrB,gDAKUQ,EAAe,KAAID,SACrB,KAAIA,SAASP,KAAKS,QAClB,KAAIA,QACRN,EAASK,GARb,yBAUIT,GAAa,GAVjB,6EALmC,sBAmBnCW,qBAAU,YAnByB,mCAoBjCC,KACC,IAEH,IAAIC,EAAU,KA6Ed,OA3EId,EACFc,EAAU,kBAACC,EAAA,EAAD,MACDb,EACTY,EACE,oCACE,kBAACtB,EAAD,KACE,6BACE,kBAACG,EAAD,kBACCO,EAAKc,SAASC,KAAI,SAACC,GAAD,OACjB,kBAACrB,EAAD,CAAWsB,IAAKD,EAAEE,KAChB,yBAAKC,UAAU,SACb,8BAAOH,EAAEI,MACT,8BACGC,KAAKC,MAAON,EAAEO,SAAWvB,EAAKwB,WAAc,KAD/C,MAIF,yBAAKL,UAAU,OACb,yBACEM,MAAO,CACLC,MAAM,GAAD,OAAKL,KAAKC,MACZN,EAAEO,SAAWvB,EAAKwB,WAAc,KAD9B,MAIPL,UAAU,yBAEZ,yBAAKA,UAAU,qBAKvB,6BACE,kBAAC1B,EAAD,uBACCO,EAAK2B,cAAcZ,KAAI,SAACa,GAAD,OACtB,kBAACjC,EAAD,CAAWsB,IAAKW,EAAEV,KAChB,yBAAKC,UAAU,SACb,8BAAOS,EAAER,MACT,8BACGC,KAAKC,MAAOM,EAAEL,SAAWvB,EAAKwB,WAAc,KAD/C,MAIF,yBAAKL,UAAU,OACb,yBACEM,MAAO,CACLC,MAAM,GAAD,OAAKL,KAAKC,MACZM,EAAEL,SAAWvB,EAAKwB,WAAc,KAD9B,MAIPL,UAAU,uBAEZ,yBAAKA,UAAU,sBAMzB,kBAAC1B,EAAD,CAAOgC,MAAO,CAAEI,UAAW,SAA3B,mBACA,kBAAC,IAAD,CAAqBH,MAAM,MAAMI,OAAQ,KACvC,kBAAC,IAAD,CACE9B,KAAMA,EAAK+B,cACXC,OAAQ,CAAEC,IAAK,EAAGC,MAAO,EAAGC,MAAO,GAAIC,OAAQ,IAE/C,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAOC,QAAQ,UACf,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMC,KAAK,WAAWD,QAAQ,QAAQE,OAAO,eAK5CtC,IACTU,EAAU,kBAAC6B,EAAA,EAAD,CAAchC,QAASP,KAG5B,kBAACf,EAAD,KAAYyB","file":"static/js/11.a586e147.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport * as variables from '../../helpers/style-constants';\n\nexport const Container = styled.section`\n  padding: 30px 40px;\n`;\n\nexport const TopContainer = styled.div`\n  width: 100%;\n  display: block;\n  & > div {\n    margin-bottom: 40px;\n  }\n  @media (min-width: ${variables.MD_BREAK_POINT}px) {\n    display: flex;\n    align-items: top;\n    justify-content: space-between;\n    & > div {\n      width: 45%;\n      margin-bottom: 0;\n    }\n  }\n`;\n\nexport const Title = styled.h3`\n  font-size: 20px;\n  font-weight: 600;\n  margin-bottom: 38px;\n\n  @media (min-width: ${variables.LG_BREAK_POINT}px) {\n    font-size: ${variables.FONT_SIZE_4};\n  }\n`;\n\nexport const ItemGroup = styled.div`\n  width: 100%;\n  margin-bottom: 20px;\n  & .title {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-weight: 500;\n    margin-bottom: 10px;\n  }\n  & .bar {\n    position: relative;\n    height: 6px;\n    border-radius: 4px;\n\n    & .background {\n      height: 100%;\n      width: 100%;\n      background: #e0e0e0;\n      position: absolute;\n      border-radius: 4px;\n    }\n\n    & .indicator {\n      position: absolute;\n      height: 100%;\n      border-radius: 4px;\n      z-index: 10;\n    }\n\n    & .orange-bar {\n      background: #f9a109;\n    }\n\n    & .blue-bar {\n      background: #56ccf2;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport ErrorMessage from '../../components/ErrorMessage';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Container, TopContainer, Title, ItemGroup } from './styles';\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport api from '../../services/api';\n\nexport default function Statistics() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState();\n  const [error, setError] = useState();\n\n  async function getData() {\n    try {\n      const response = await api.get('/statistics');\n      setData(response.data);\n    } catch (err) {\n      const errorMessage = err.response\n        ? err.response.data.message\n        : err.message;\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  let content = null;\n\n  if (isLoading) {\n    content = <Spinner />;\n  } else if (data) {\n    content = (\n      <>\n        <TopContainer>\n          <div>\n            <Title>Top Items</Title>\n            {data.topItems.map((i) => (\n              <ItemGroup key={i._id}>\n                <div className=\"title\">\n                  <span>{i.name}</span>\n                  <span>\n                    {Math.round((i.quantity / data.totalItems) * 100)}%\n                  </span>\n                </div>\n                <div className=\"bar\">\n                  <div\n                    style={{\n                      width: `${Math.round(\n                        (i.quantity / data.totalItems) * 100\n                      )}%`,\n                    }}\n                    className=\"indicator orange-bar\"\n                  ></div>\n                  <div className=\"background\"></div>\n                </div>\n              </ItemGroup>\n            ))}\n          </div>\n          <div>\n            <Title>Top Categories</Title>\n            {data.topCategories.map((c) => (\n              <ItemGroup key={c._id}>\n                <div className=\"title\">\n                  <span>{c.name}</span>\n                  <span>\n                    {Math.round((c.quantity / data.totalItems) * 100)}%\n                  </span>\n                </div>\n                <div className=\"bar\">\n                  <div\n                    style={{\n                      width: `${Math.round(\n                        (c.quantity / data.totalItems) * 100\n                      )}%`,\n                    }}\n                    className=\"indicator blue-bar\"\n                  ></div>\n                  <div className=\"background\"></div>\n                </div>\n              </ItemGroup>\n            ))}\n          </div>\n        </TopContainer>\n        <Title style={{ marginTop: '50px' }}>Monthly Summary</Title>\n        <ResponsiveContainer width=\"95%\" height={300}>\n          <LineChart\n            data={data.itemsPerMonth}\n            margin={{ top: 0, right: 0, left: -30, bottom: 0 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Legend />\n            <Tooltip />\n            <XAxis dataKey=\"month\" />\n            <YAxis />\n            <Line type=\"monotone\" dataKey=\"items\" stroke=\"#F9A109\" />\n          </LineChart>\n        </ResponsiveContainer>\n      </>\n    );\n  } else if (error) {\n    content = <ErrorMessage message={error} />;\n  }\n\n  return <Container>{content}</Container>;\n}\n"],"sourceRoot":""}