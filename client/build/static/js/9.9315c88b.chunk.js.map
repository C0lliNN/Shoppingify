{"version":3,"sources":["containers/History/styles.js","containers/History/index.js"],"names":["Container","styled","section","Title","h3","variables","ListsContainer","ul","NoItems","p","List","li","Badge","span","props","canceled","History","useState","lists","setLists","isLoading","setIsLoading","error","setError","history","useHistory","a","api","get","data","transformedData","map","list","formattedDate","moment","updated","format","_id","name","date","status","errorMessage","response","message","useEffect","fetchLists","content","Spinner","ErrorMessage","length","key","className","onClick","id","push"],"mappings":"6pDAGO,IAAMA,EAAYC,IAAOC,QAAV,KAITC,EAAQF,IAAOG,GAAV,IACHC,IAGQA,KAKVC,EAAiBL,IAAOM,GAAV,KAKdC,EAAUP,IAAOQ,EAAV,IACLJ,IACEA,KAKJK,EAAOT,IAAOU,GAAV,IAUAN,IAUAA,IAaEA,KAKNO,EAAQX,IAAOY,KAAV,KACI,SAACC,GAAD,OAAYA,EAAMC,SAAW,UAAY,aAEpD,SAACD,GAAD,OAAYA,EAAMC,SAAW,UAAY,aC7DrC,SAASC,IAAW,IAAD,EACNC,mBAAS,IADH,mBACzBC,EADyB,KAClBC,EADkB,OAEEF,oBAAS,GAFX,mBAEzBG,EAFyB,KAEdC,EAFc,OAGNJ,qBAHM,mBAGzBK,EAHyB,KAGlBC,EAHkB,KAI1BC,EAAUC,cAJgB,4CAMhC,kCAAAC,EAAA,+EAE2BC,IAAIC,IAAI,UAFnC,gBAEYC,EAFZ,EAEYA,KACFC,EAAkBD,EAAKE,KAAI,SAACC,GAChC,IAAMC,EAAgBC,IAAOF,EAAKG,SAASC,OAAO,iBAElD,MAAO,CACLC,IAAKL,EAAKK,IACVC,KAAMN,EAAKM,KACXC,KAAMN,EACNO,OAAQR,EAAKQ,WAIjBrB,EAASW,GAdb,gDAgBUW,EAAe,KAAIC,SACrB,KAAIA,SAASb,KAAKc,QAClB,KAAIA,QACRpB,EAASkB,GAnBb,yBAqBIpB,GAAa,GArBjB,6EANgC,sBAmChCuB,qBAAU,YAnCsB,mCAoC9BC,KACC,IAEH,IAAIC,EAAU,KAqCd,OAlCEA,EADE1B,EACQ,kBAAC2B,EAAA,EAAD,MACDzB,EACC,kBAAC0B,EAAA,EAAD,CAAcL,QAASrB,IACxBJ,EAAM+B,OAEb,kBAAC3C,EAAD,KACGY,EAAMa,KAAI,SAACC,GAAD,OACT,kBAACtB,EAAD,CAAMwC,IAAKlB,EAAKK,KACd,4BAAKL,EAAKM,MACV,6BACE,yBAAKa,UAAU,QACb,0BAAMA,UAAU,6BAAhB,cACA,8BAAOnB,EAAKO,MACZ,kBAAC3B,EAAD,CAAOG,SAA0B,aAAhBiB,EAAKQ,QACnBR,EAAKQ,QAER,4BACEW,UAAU,QACVC,QAAS,kBA7BMC,EA6BsBrB,EAAKK,SA5BxDb,EAAQ8B,KAAR,mBAAyBD,IAD3B,IAA+BA,IA+Bf,0BAAMF,UAAU,wBAAhB,6BAWJ,kBAAC3C,EAAD,qBAIV,kBAACR,EAAD,KACE,kBAACG,EAAD,yBACC2C","file":"static/js/9.9315c88b.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport * as variables from '../../helpers/style-constants';\n\nexport const Container = styled.section`\n  padding: 20px 40px;\n`;\n\nexport const Title = styled.h3`\n  font-size: ${variables.FONT_SIZE_4};\n  font-weight: 700;\n\n  @media (min-width: ${variables.LG_BREAK_POINT}px) {\n    font-size: 32px;\n  }\n`;\n\nexport const ListsContainer = styled.ul`\n  margin: 0;\n  margin-top: 40px;\n`;\n\nexport const NoItems = styled.p`\n  font-size: ${variables.FONT_SIZE_3};\n  font-family: ${variables.FONT_FAMILY};\n  font-weight: 600;\n  margin-top: 50px;\n`;\n\nexport const List = styled.li`\n  box-shadow: 0px 2px 12px rgba(0, 0, 0, 0.05);\n  border-radius: 12px;\n  padding: 20px;\n  margin: 12px auto;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  & h3 {\n    font-size: ${variables.FONT_SIZE_2};\n    font-weight: 700;\n  }\n\n  & .date {\n    color: #c1c1c4;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-weight: 500;\n    font-size: ${variables.FONT_SIZE_1};\n    & .icon {\n      margin-right: 10px;\n    }\n  }\n\n  & .right {\n    cursor: pointer;\n    background-color: transparent;\n    border: none;\n    outline: none;\n    & span {\n      color: #f9a109;\n      font-size: ${variables.FONT_SIZE_3};\n    }\n  }\n`;\n\nexport const Badge = styled.span`\n  border: 1px solid ${(props) => (props.canceled ? '#EB5757' : '#56CCF2')};\n  border-radius: 6px;\n  color: ${(props) => (props.canceled ? '#EB5757' : '#56CCF2')};\n  padding: 3px 5px;\n  margin: auto 15px;\n`;\n","import moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport ErrorMessage from '../../components/ErrorMessage';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport api from '../../services/api';\nimport { List, ListsContainer, Title, Container, Badge, NoItems } from './styles';\n\nexport default function History() {\n  const [lists, setLists] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState();\n  const history = useHistory();\n\n  async function fetchLists() {\n    try {\n      const { data } = await api.get('/lists');\n      const transformedData = data.map((list) => {\n        const formattedDate = moment(list.updated).format('MMM DD.M.YYYY');\n\n        return {\n          _id: list._id,\n          name: list.name,\n          date: formattedDate,\n          status: list.status,\n        };\n      });\n\n      setLists(transformedData);\n    } catch (err) {\n      const errorMessage = err.response\n        ? err.response.data.message\n        : err.message;\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function handleShowListDetails(id) {\n    history.push(`/history/${id}`);\n  }\n\n  useEffect(() => {\n    fetchLists();\n  }, []);\n\n  let content = null;\n\n  if (isLoading) {\n    content = <Spinner />;\n  } else if (error) {\n    content = <ErrorMessage message={error} />;\n  } else if (lists.length) {\n    content = (\n      <ListsContainer>\n        {lists.map((list) => (\n          <List key={list._id}>\n            <h3>{list.name}</h3>\n            <div>\n              <div className=\"date\">\n                <span className=\"material-icons-round icon\">event_note</span>\n                <span>{list.date}</span>\n                <Badge canceled={list.status === 'canceled'}>\n                  {list.status}\n                </Badge>\n                <button\n                  className=\"right\"\n                  onClick={() => handleShowListDetails(list._id)}\n                >\n                  <span className=\"material-icons-round\">\n                    arrow_forward_ios\n                  </span>\n                </button>\n              </div>\n            </div>\n          </List>\n        ))}\n      </ListsContainer>\n    );\n  } else {\n    content = <NoItems>No Items Yet</NoItems>\n  }\n\n  return (\n    <Container>\n      <Title>Shopping History</Title>\n      {content}\n    </Container>\n  );\n}\n"],"sourceRoot":""}